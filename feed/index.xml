<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>心湖维基</title><link>/</link><description>愿此地一片净土,个人维基站</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.jsdelivr.net/gh/lexinhu/site-Wiki@gh-pages/logo.png</url><title>心湖维基</title><link>/</link></image><language>zh-CN</language><lastBuildDate>Mon, 09 Mar 2020 07:56:18 +0806</lastBuildDate><pubDate>Mon, 09 Mar 2020 07:56:18 +0806</pubDate><item><title>记-维基站的搭建</title><link>/archives/wike-building/</link><description>&lt;h1&gt;记-维基站的搭建&lt;/h1&gt;
&lt;p&gt;我自认为个人Wiki两大核心：分类整理，搜索查漏&lt;/p&gt;
&lt;p&gt;这与个人博客相辅相成，也是在定位上的不同带来了本质的差异。&lt;/p&gt;
&lt;p&gt;本记内容主要围绕维基站搭建而谈，不再展开细说其他了。&lt;/p&gt;
&lt;p&gt;原本我是打算使用hexo这种生成器搭建一个知识库并托管于Gitee，本地运作半个月的hexo最终在我心目中失去了地位。因为种种原因，我也放弃了使用Gitee托管静态博客的想法。后来我看到了一位老朋友的文章 &lt;a href="https://blog.imalan.cn/archives/blog-with-github/"&gt;完全使用 GitHub 写博客&lt;/a&gt;  给了我很大的科普。&lt;/p&gt;
&lt;p&gt;于是我们看到的&lt;strong&gt;心湖维基&lt;/strong&gt;就诞生了，使用Github托管源码和静态页面，这是两个不同的分支来实现。基于 GitHub Actions 的自动构建，能够全自动的更新博客。使用高效快速的js­De­livr来加速资源访问。自由采用本地Typora和VsCode书写博客，一套完整的Git自动处理，使用PigGo截图自动上传又拍云并复制为Markdown格式，几乎不需要人工的操作与维护。&lt;/p&gt;
&lt;p&gt;如果你想拥有本地的博客生成器，我是非常推荐hexo的。&lt;/p&gt;
&lt;p&gt;另外&lt;strong&gt;&lt;a href="https://github.com/AlanDecode/Maverick"&gt; Maverick&lt;/a&gt;&lt;/strong&gt; 这个使用了Python开发的静态页面生成器也绝不会让你失望。&lt;/p&gt;
&lt;p&gt;当然我说了一大堆，你可能还是没明白，简单说搭建这样的一个维基站除了域名外几乎没有任何成本，当然这样的域名Github也会提供给你，所以你不凡大胆一试。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;相关教程 &lt;strong&gt;&lt;a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate"&gt;示例仓库 &lt;/a&gt;&lt;/strong&gt;（务必前往示例仓库，几乎做到了开箱即用）&lt;/p&gt;
&lt;p&gt;你可以将这个仓库 fork 到自己的账户下（点击右上角的 Fork 按钮），然后按照本文档余下的内容操作一遍，就知道该如何使用了。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Fork 之后暂时不要修改仓库名称，保持 Blog-With-GitHub-Boilerplate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;第一步：为仓库开启 Pages 服务&lt;/h2&gt;
&lt;p&gt;进入 Fork 的仓库，点击右上角这个 Settings 按钮，找到 GitHub Pages 相关设置：
&lt;figure&gt;&lt;img data-width="536" data-height="58" src="https://cdn.xn2001.com/2020/03/02/20200302213027-1.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="749" data-height="526" src="https://cdn.xn2001.com/2020/03/02/20200302213027.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置发布来源为 gh-pages branch，稍等片刻你就可以通过类似 &lt;code&gt;https://&amp;lt;用户名&amp;gt;.github.io/Blog-With-GitHub-Boilerplate&lt;/code&gt; 这样的链接访问你的网站了。&lt;/p&gt;
&lt;h2&gt;第二步：为仓库添加一个 token&lt;/h2&gt;
&lt;p&gt;为了让 GitHub Actions 可以自动更新你的网站，需要添加一个 Token。点击&lt;strong&gt;&lt;a href="https://github.com/settings/tokens"&gt;这个网址&lt;/a&gt;&lt;/strong&gt;，点击右上角的 Generate new token，起个名字并勾选 repo 复选框：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="801" data-height="484" src="https://cdn.xn2001.com/2020/03/02/20200302213600.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击页脚的 Generate Token，新的 token 会显示出来，把它复制下来，保存好。关了这个页面你就永远也看不到它了。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="760" data-height="220" src="https://cdn.xn2001.com/2020/03/02/20200302213610.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回到仓库中，进入 Setting，坐标找到 Secrets 选项卡，新建一个名叫 PERSONAL_TOKEN 的 secret：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1024" data-height="675" src="https://cdn.xn2001.com/2020/03/02/20200302213619.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;💡 从这里开始我们会对仓库的文件做一些修改，如果你电脑上有安装 Git，可以把仓库 clone 到本地，完成修改后提交并 push 回去；如果没有安装，可以直接在浏览器中编辑文件。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;第三步：尝试修改一下网站设置&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;新 fork 的仓库可能需要手动打开 Actions。点击仓库顶部的 Actions 按钮：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="249" data-height="134" src="https://cdn.xn2001.com/2020/03/02/20200302213629.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果出现了以下提示，点击 "I understand my workflows, go ahead and run them".&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="885" data-height="376" src="https://cdn.xn2001.com/2020/03/02/20200302213654.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回到仓库首页，点击 conf.py 文件，然后点击编辑按钮：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1033" data-height="286" src="https://cdn.xn2001.com/2020/03/02/20200302213705.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为你的网站起个名字，填写到 &lt;code&gt;site_name&lt;/code&gt; 这里&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;author&lt;/code&gt;，&lt;code&gt;email&lt;/code&gt;，&lt;code&gt;description&lt;/code&gt; 等选项为你的内容&lt;/li&gt;
&lt;li&gt;其它选项也可以随意修改（暂时不要修改 &lt;code&gt;site_prefix&lt;/code&gt; 选项）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;点击页脚的 Commit changes，稍等片刻再访问 &lt;code&gt;https://&amp;lt;用户名&amp;gt;.github.io/Blog-With-GitHub-Boilerplate&lt;/code&gt; 看是不是已经更新了。如果没有，请点击仓库标题下方的 Actions 按钮，在里面查看自动构建状态。&lt;/p&gt;
&lt;h2&gt;第四步：尝试发布新的内容&lt;/h2&gt;
&lt;p&gt;点击进入仓库的 src 文件夹，并点击 Create new file&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1069" data-height="160" src="https://cdn.xn2001.com/2020/03/02/20200302213718.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;填写文件名以及内容。文件名可以起 &lt;code&gt;我的第一篇文章.md&lt;/code&gt;，内容可以参考这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: 我的第一篇文章
slug: my-first-awesome-post
date: 2019-12-17 20:34
status: publish
author: &amp;lt;填写你的名字&amp;gt;
categories: 
  - 默认分类
tags: 
  - 博客
  - GitHub
excerpt: Hello World!
---

这是我的第一篇文章。文章使用 GitHub 管理，并通过 GitHub Actions 自动构建与发布！&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;点击页脚的 Commit new file，稍等片刻再访问 &lt;code&gt;https://&amp;lt;用户名&amp;gt;.github.io/Blog-With-GitHub-Boilerplate&lt;/code&gt;，可见新文章已经发布了！&lt;/p&gt;
&lt;h2&gt;第五步：使用 jsDelivr 作为博客的 CDN 服务&lt;/h2&gt;
&lt;p&gt;回到仓库首页，点击 conf.py 文件，然后点击编辑按钮。修改 &lt;code&gt;enable_jsdelivr&lt;/code&gt; 如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enable_jsdelivr = {
    "enabled": True,
    "repo": "&amp;lt;你的用户名&amp;gt;/Blog-With-GitHub-Boilerplate@gh-pages"
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;点击 Commit changes。然后修改你刚才添加的文章，在里面插入一张仓库中的图片：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是我的第一篇文章。文章使用 GitHub 管理，并通过 GitHub Actions 自动构建与发布！

![幽灵公主剧照](./images/Mononoke_Hime.jpg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发布后稍等片刻再访问你的网站，此时网站的图片都通过 jsDelivr 传输的。不信的话在图片上右键选择「在新标签页中打开图片」，看链接是否以 &lt;code&gt;cdn.jsdelivr.net&lt;/code&gt; 开头。&lt;/p&gt;
&lt;p&gt;要插入你自己的图片，请把图片上传到 &lt;code&gt;src/images&lt;/code&gt; 文件夹里，然后在文章中使用 Markdown 语法引用即可。&lt;/p&gt;
&lt;h2&gt;第六步：进行更多的自定义与创作&lt;/h2&gt;
&lt;p&gt;经过以上的步骤你已经学会了自定义网站、添加文章与修改文章。接下来就该你自由发挥了。仓库中 conf.py 里面的内容都可以自定义修改，特别要注意格式，比如引号要使用英文引号之类的。针对网站的设置项请参考 &lt;a href="https://github.com/AlanDecode/Maverick/blob/master/README.md"&gt;Maverick/README.md&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;仓库自带的 about.md 与 Typography 都可改可删，全看你。&lt;/p&gt;
&lt;p&gt;仓库&lt;code&gt;src/static&lt;/code&gt; 文件夹中有一个 logo.png，这是示例 logo。你可以在这个文件夹中上传新的 logo 图片，最好是方形的图片，然后在 conf.py 中修改 &lt;code&gt;site_logo&lt;/code&gt; 为 &lt;code&gt;"${static_prefix}新的logo.png"&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;现在可以把仓库名称改成你想要的名字了。改了之后，记得将 conf.py 中的 &lt;code&gt;site_prefix&lt;/code&gt; 设置为 &lt;code&gt;"/&amp;lt;新的仓库名&amp;gt;/"&lt;/code&gt;，并且对应修改 &lt;code&gt;enable_jsdelivr&lt;/code&gt;选项的内容。&lt;/p&gt;
&lt;p&gt;如果要将仓库名修改为 &lt;code&gt;&amp;lt;用户名&amp;gt;.github.io&lt;/code&gt; 的形式，请看 &lt;a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate/blob/source/About-User-Pages.md"&gt;About-User-Pages&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;第七步：在本地进行创作&lt;/h2&gt;
&lt;p&gt;你可以把仓库 clone 到电脑上，修改后再将修改 push 回去。如果你的电脑上有安装 &lt;code&gt;make&lt;/code&gt;，则这个过程可以方便一些：&lt;/p&gt;
&lt;p&gt;升级 Maverick：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make mvrk&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;升级主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改站点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make msg="Add some change" site&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;关于如何在电脑上使用 Git&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你之前没有使用过 GitHub，那么需要进行一定的设置。如果你的电脑是 macOS 或者 Linux，git 可能是默认安装在电脑上的；如果是 Windows，则需要到&lt;a href="https://git-scm.com/downloads"&gt;这里&lt;/a&gt;下载合适的 Git 安装到电脑上。记得安装时选中将 git 添加到 PATH。&lt;/p&gt;
&lt;p&gt;文件管理器中右键，点击 Git Bash Here，在弹出的窗口中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name "你的GitHub用户名"
git config --global user.email "你的GitHub邮箱"
git config --global credential.helper store&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后到仓库右上角的 Clone or download 那里，复制仓库链接（建议使用 HTTPS）：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="496" data-height="299" src="https://cdn.xn2001.com/2020/03/02/20200302213733.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone &amp;lt;仓库链接&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若需要输入用户名密码则输入就行。这样仓库就克隆到了本地。在仓库中进行修改后，这样提交文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd 到仓库文件夹后

git add .
git commit -m "添加修改"
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样本地的修改就推送到了 GitHub。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;第八步：绑定自定义域名&lt;/h2&gt;
&lt;p&gt;如果你有自己的域名，请在域名解析商那里将域名 CNAME 设置为 &lt;code&gt;&amp;lt;用户名&amp;gt;.github.io&lt;/code&gt;，然后回到仓库，在 &lt;code&gt;src/static&lt;/code&gt; 文件夹中添加一个名叫 CNAME 的文件，内容填写你自己的域名。然后在 conf.py 中修改 &lt;code&gt;site_prefix&lt;/code&gt; 为 &lt;code&gt;"/"&lt;/code&gt;。稍等片刻，你的网站就能通过你的域名访问了。&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/wike-building/</guid><pubDate>Mon, 02 Mar 2020 21:20:00 +0806</pubDate></item><item><title>JavaWeb使用response的中文乱码问题</title><link>/archives/encoding-javaweb/</link><description>&lt;p&gt;原生JavaWeb使用response的中文乱码问题&lt;/p&gt;
&lt;p&gt;继承HttpServlet后重写方法时(如doGet)加入两行代码设置utf-8编码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/json;charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCharacterEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//需要加上方法的最上面,也就是在方法内容的首行.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/json;charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCharacterEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PrintWriter&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWriter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;HTML&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;HEAD&amp;gt;&amp;lt;TITLE&amp;gt;Hello World&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;BODY&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;我终于可以显示中文了&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/encoding-javaweb/</guid><pubDate>Tue, 03 Mar 2020 15:34:00 +0806</pubDate></item><item><title>javaweb项目使用Tomcat（idea）</title><link>/archives/tomcat-javaweb/</link><description>&lt;h1&gt;javaweb项目使用Tomcat（idea）&lt;/h1&gt;
&lt;h2&gt;1. 点击Add Configuration&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1161" data-height="305" src="https://cdn.xn2001.com/2020/03/03/20200303174858.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;2. 点击+号&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1448" data-height="859" src="https://cdn.xn2001.com/2020/03/03/20200303175104.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;3. 选择Tomcat的本地位置&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1448" data-height="859" src="https://cdn.xn2001.com/2020/03/03/20200303180227.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;4. 添加入war包&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1198" data-height="484" src="https://cdn.xn2001.com/2020/03/03/20200303184853.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;5. 修改路径&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="964" data-height="666" src="https://cdn.xn2001.com/2020/03/03/20200303180606.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;6. 点击OK，运行项目&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="443" data-height="86" src="https://cdn.xn2001.com/2020/03/03/20200303180648.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/tomcat-javaweb/</guid><pubDate>Tue, 03 Mar 2020 18:09:00 +0806</pubDate></item><item><title>纯Java搭建SpringMVC项目</title><link>/archives/mvc-Java/</link><description>&lt;h1&gt;纯Java搭建SpringMVC项目&lt;/h1&gt;
&lt;h2&gt;1. 创建工程&lt;/h2&gt;
&lt;p&gt;这里我们创建一个普通Maven工程，并添加 SpringMVC 的依赖，这里环境的搭建需要用到 Servlet ，所以我们还需要引入 Servlet 的依赖，最终pom.xml 添加的内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.2.2.RELEASE&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2. 添加SpringMVC配置类&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@ComponentScan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.xn2001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpringMVCConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@Configuration标注这个类为配置类&lt;/p&gt;
&lt;p&gt;@ComponentScan("com.xn2001")，扫描这个包下里面的Bean。&lt;/p&gt;
&lt;p&gt;这里如果不需要在 SpringMVC 中添加其他的额外配置，这样就可以了。&lt;/p&gt;
&lt;h2&gt;3. 添加web.xml配置类&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebInit&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;WebApplicationInitializer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onStartup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletContext&lt;/span&gt; &lt;span class="n"&gt;servletContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AnnotationConfigWebApplicationContext&lt;/span&gt; &lt;span class="n"&gt;applicationContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AnnotationConfigWebApplicationContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SpringMVCConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ServletRegistration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;springmvc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;servletContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addServlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;springmvc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DispatcherServlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;springmvc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;springmvc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLoadOnStartup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;对比使用web.xml&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;SpringMVC&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class="nt"&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;classpath:springmvc.xml&lt;span class="nt"&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;SpringMVC&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对比我们不难看出，使用xml或者类的方式，其本质都是一样的，添加入一个SpringMVC中央处理器，设置配置文件和初始化启动优先级，最后进行mapping。关于里面更深层的东西，我并不觉得自己多懂，也不想在这里长篇大论。&lt;/p&gt;
&lt;p&gt;这里为什么没有写Spring配置类，如果你简单开发过SSM整合的项目，你不难发现其实直接将所有配置放到 SpringMVC 的配置中来完成是没有问题的。&lt;/p&gt;
&lt;h2&gt;4. 添加HelloController&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello,World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@RestController是@ResponseBody+@Controller的组合，&lt;/p&gt;
&lt;p&gt;声明为控制类&lt;/p&gt;
&lt;p&gt;且类下的所有方法的返回值(return)由Java对象转为json格式输出，这样我们在浏览器直接看到了内容了。&lt;/p&gt;
&lt;h2&gt;5. 启动项目&lt;/h2&gt;
&lt;p&gt;我们需要前往pom.xml中加入下面一行代码，设置打包方式。之后放入Tomcat容器启动项目即可，关于如何在idea中加入Tomcat项目，这里推荐自己之前写过的一篇非常&lt;a href="https://www.xn2001.com/archives/386.html"&gt;详细的演示&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你启动时首页是404说明已经成功了，这时候在网址后加入hello就看到我们输出的 Hello，World 了。&lt;/p&gt;
</description><author>jialna@qq.com (心中有湖)</author><guid isPermaLink="true">/archives/mvc-Java/</guid><pubDate>Wed, 04 Mar 2020 15:00:11 +0806</pubDate></item><item><title>教育邮箱免费申请正版idea(包括全家桶)</title><link>/archives/jetbrains-edu/</link><description>&lt;p&gt;进入申请界面：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/shop/eform/students"&gt;https://www.jetbrains.com/shop/eform/students&lt;/a&gt;  填写相关信息。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="767" data-height="1076" src="https://cdn.xn2001.com/2020/03/05/20200305002015-5.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="752" data-height="412" src="https://cdn.xn2001.com/2020/03/05/20200305002015-4.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;看到上面的界面时我们已经OK了，这时候去你的教育邮箱中查看是否有一份新邮件，可能需要1-2分钟时间&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1440" data-height="502" src="https://cdn.xn2001.com/2020/03/05/20200305002015.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里需要你阅读2分钟左右的时长才会让你点击Accept&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1918" data-height="898" src="https://cdn.xn2001.com/2020/03/05/20200305002311.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入你的教育邮箱开始进行注册，&lt;strong&gt;注意&lt;/strong&gt;是填写在下面的框。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1211" data-height="727" src="https://cdn.xn2001.com/2020/03/05/20200305002015-6.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="951" data-height="876" src="https://cdn.xn2001.com/2020/03/05/20200305002015-2.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1154" data-height="850" src="https://cdn.xn2001.com/2020/03/05/20200305002015-1.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;开始奔放吧，这里输入你注册的邮箱密码登录就可以啦。其他全家桶也是如此激活。（这里登录有时候会失败，登录几次就可以了。）&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="745" data-height="514" src="https://cdn.xn2001.com/2020/03/05/20200305002015-3.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/jetbrains-edu/</guid><pubDate>Thu, 05 Mar 2020 01:09:00 +0806</pubDate></item><item><title>思-关于maven的dependencyManagement</title><link>/archives/dependencyManagement-maven/</link><description>&lt;h2&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;我们不妨先去看看官方的文档。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Besides inheriting certain top-level elements, parents have elements to configure values for child &lt;code&gt;POMs&lt;/code&gt; and transitive dependencies. One of those elements is &lt;code&gt;dependencyManagement&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt;: is used by a POM to help manage dependency information across all of its children. If the &lt;code&gt;my-parent&lt;/code&gt; project uses &lt;code&gt;dependencyManagement&lt;/code&gt; to define a dependency on &lt;code&gt;junit:junit:4.12&lt;/code&gt;, then POMs inheriting from this one can set their dependency giving the &lt;code&gt;groupId&lt;/code&gt;=&lt;code&gt;junit&lt;/code&gt; and &lt;code&gt;artifactId&lt;/code&gt;=&lt;code&gt;junit&lt;/code&gt; only and Maven will fill in the &lt;code&gt;version&lt;/code&gt; set by the parent. The benefits of this method are obvious. Dependency details can be set in one central location, which propagates to all inheriting POMs.
Note that the version and scope of artifacts which are incorporated from transitive dependencies are also controlled by version specifications in a dependency management section. This can lead to unexpected consequences. Consider a case in which your project uses two dependences, &lt;code&gt;dep1&lt;/code&gt; and &lt;code&gt;dep2&lt;/code&gt;. &lt;code&gt;dep2&lt;/code&gt; in turn also uses &lt;code&gt;dep1&lt;/code&gt;, and requires a particular minimum version to function. If you then use &lt;code&gt;dependencyManagement&lt;/code&gt; to specify an older version, &lt;code&gt;dep2&lt;/code&gt; will be forced to use the older version, and fail. So, you must be careful to check the entire dependency tree to avoid this problem; &lt;code&gt;mvn dependency:tree&lt;/code&gt; is helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我简单用大白话说一下他在讲什么，这个东西是用来管理依赖统一的，当你在父级依赖中拥有一个依赖，他就可以替你在子模块中搞定他的版本，只要你的子模块&lt;code&gt;groupId&lt;/code&gt;和&lt;code&gt;artifactId&lt;/code&gt;跟父级模块名字一样即可。很明显的好处就是版本规范统一控制。之后他说了可能发生的错误，叫你小心管理好依赖树，这方面我们也不用担心太多，因为我们有idea。大家看看官方原话，看英语文档确实很难，好在程序员写技术文档都会用通俗易懂的词汇（这里我说的也包括中文文档）。&lt;/p&gt;
&lt;p&gt;我们了解了这个东西之后，我寻思着为何没有例子，我把整个官方文档看了一遍也没找到，显然这不是Maven必需的，这样的版本规范控制，如果不是超大型项目又怎会用得到，大部分项目不过单模块业务处理，哪怕你是个多模块项目，也不外乎是三层提取，我们可以直接在父模块依赖中引入共有的，在子模块中引入自需的，我做项目便会如此。那么我为什么要写这个东西呢，因为我想将所有的学习源码都托管于Github，而不仅限于项目。这就导致我需要大量模块来进行分布，Maven就解决了我这一难题。&lt;/p&gt;
&lt;p&gt;回到上面，官方没有给例子，我们就自己来，毕竟编程容错率是非常高的。&lt;/p&gt;
&lt;p&gt;首先我们新建一个Maven的空项目，由于我们要用到多模块，我们将自带的src删除。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1475" data-height="745" src="https://cdn.xn2001.com/2020/03/06/20200306063055.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们来到项目下)的pom.xml，既然用到&lt;code&gt;dependencyManagement&lt;/code&gt;，我们就直接上代码。这里直接使用mysql和Lombok这两个依赖作为演示。（考虑到使用一个依赖可能不具备说服力，三个又搞得像在科研，因此二个为最佳）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.0.18&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.18.10&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的写法使得版本号也在其中，依赖较多时不方便管理，我们养成习惯提取出来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mysql.connector.version&amp;gt;&lt;/span&gt;8.0.18&lt;span class="nt"&gt;&amp;lt;/mysql.connector.version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;lombok.version&amp;gt;&lt;/span&gt;1.18.10&lt;span class="nt"&gt;&amp;lt;/lombok.version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将原本的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;version&amp;gt;8.0.18&amp;lt;/version&amp;gt;&lt;/code&gt;修改为&lt;code&gt;&amp;lt;version&amp;gt;${mysql.connector.version}&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;version&amp;gt;1.18.10&amp;lt;/version&amp;gt;&lt;/code&gt;修改为 &lt;code&gt;&amp;lt;version&amp;gt;${lombok.version}&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们更新一下Maven，会发现项目中并没有引入依赖，这就很好的说明了&lt;code&gt;dependencyManagement&lt;/code&gt;和&lt;code&gt;dependencies&lt;/code&gt;的区别，也展示出它的优越之处，子模块只需要放心使用依赖而无需考虑版本冲突问题。同时很好的解决了新手打包项目时优化不佳导致体积过大。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1026" data-height="401" src="https://cdn.xn2001.com/2020/03/06/20200306065552.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们去新建一个Module(模块)，进入模块下的pom.xml&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="898" data-height="312" src="https://cdn.xn2001.com/2020/03/06/20200306071252.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们加入在父模块中的两个依赖，看看是否能在子模块中引入。按照官方文档，你只要&lt;code&gt;groupId&lt;/code&gt;和&lt;code&gt;artifactId&lt;/code&gt;跟父模块一一对应，也就是名字相同即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="704" data-height="389" src="https://cdn.xn2001.com/2020/03/06/20200306072453.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果跟预期的一样，我们再去新建一个模块，试着只引入mysql。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="547" data-height="507" src="https://cdn.xn2001.com/2020/03/06/20200306072750.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里我们的测试就已经完成了，我们不难发现版本管理这思想与SpringBoot有异曲同工之妙，但却比SpringBoot要灵活得多。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;想来自己也是很用心写下这篇博客，与其说它是教程，不如说是对一个东西的思考与实践。所以我认为这篇博客不存在长篇大论，这也是我更愿意看到的技术博客。它面对的是新学习的人，如果你已经了解过这个东西，单单是因为忘记了一个知识点想通过百度来获取使用方法，那我更提倡你学习时为自己记录笔记，一方面提升你的知识索引速度，也增强你的知识掌握。所以我会将这篇博客再分离出一篇较简短的使用方法，来方便自己日后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/dependencyManagement-maven/</guid><pubDate>Fri, 06 Mar 2020 12:10:00 +0806</pubDate></item><item><title>如何制作圆形头像或图片</title><link>/archives/head-circular/</link><description>&lt;blockquote&gt;&lt;p&gt;有时候我们为了效果展示，需要把头像或者图片转化为圆形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;原理：我们利用Photoshop的椭圆选区工具，将未选择的区域删除，就得到了我们想要的效果啦。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;实现：&lt;/h3&gt;
&lt;h4&gt;1. 打开Photoshop&lt;/h4&gt;
&lt;p&gt;打开你需要操作的图片，如果太小就按下Ctrl+0，再按下shift+Ctrl+n，新建一个图层（Ctrl+j），将底图取消显示。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1352" data-height="911" src="https://cdn.xn2001.com/2020/03/08/20200308173217.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.xn2001.com/2020/03/08/20200308174140.png" style="zoom: 67%;" /&gt;&lt;/p&gt;
&lt;h4&gt;2. 选择椭圆工具&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1402" data-height="951" src="https://cdn.xn2001.com/2020/03/08/20200308173353.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;3. 选择区域&lt;/h4&gt;
&lt;p&gt;按住shift不放，拖动鼠标，勾画出圆形区域，确定选区（Ctrl+回车），切换到原图，反选区域（shift+Ctrl+j），按下del删除键。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1311" data-height="870" src="https://cdn.xn2001.com/2020/03/08/20200308174414.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1846" data-height="950" src="https://cdn.xn2001.com/2020/03/08/20200308174507.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1311" data-height="870" src="https://cdn.xn2001.com/2020/03/08/20200308174549.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要裁剪的话，这里有个裁剪工具。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="550" data-height="487" src="https://cdn.xn2001.com/2020/03/08/20200308174630.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;4. 导出图像&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1014" data-height="861" src="https://cdn.xn2001.com/2020/03/08/20200308174818.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1375" data-height="875" src="https://cdn.xn2001.com/2020/03/08/20200308174909.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择PNG可以导出背景是透明的圆形头像，大功告成。&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/head-circular/</guid><pubDate>Sun, 08 Mar 2020 12:10:00 +0806</pubDate></item><item><title>Java多线程的实现方式</title><link>/archives/thread-know-java/</link><description>&lt;h2&gt;并发和并行&lt;/h2&gt;
&lt;p&gt;并发:在同一时刻,有多个指令在&lt;strong&gt;单个CPU&lt;/strong&gt;上&lt;strong&gt;交替&lt;/strong&gt;执行.&lt;/p&gt;
&lt;p&gt;并行:在同一时刻,有多个指令在&lt;strong&gt;多个CPU&lt;/strong&gt;上&lt;strong&gt;同时&lt;/strong&gt;执行.&lt;/p&gt;
&lt;h2&gt;进程和线程&lt;/h2&gt;
&lt;p&gt;进程:正在运行的软件.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立性:进程是一个能独立运行的基本单位,同时也是系统分配资源和调度的独立单位.&lt;/li&gt;
&lt;li&gt;动态性:进程的实质是程序的一次执行过程,进程是动态产生,动态消亡的.&lt;/li&gt;
&lt;li&gt;并发性:任何进程都可以同其他进程一起并发执行.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程:进程中的单个顺序控制流,是一条执行路径.&lt;/p&gt;
&lt;h2&gt;多线程的实现方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;继承Thread类的方式进行实现&lt;/li&gt;
&lt;li&gt;实现Runnable接口的方式进行实现&lt;/li&gt;
&lt;li&gt;利用Callable和Future接口方式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;多线程的实现方案&lt;/h2&gt;
&lt;h3&gt;方式1：继承Thread类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;定义一个类如MyThread继承Thread类&lt;/li&gt;
&lt;li&gt;在MyThread类中重写run()方法&lt;/li&gt;
&lt;li&gt;创建MyThread类的对象&lt;/li&gt;
&lt;li&gt;启动线程&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyThread&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//        run方法是执行的内容&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;线程开启了&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyThreadTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyThread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;MyThread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//        可以发现两个线程是交替执行的&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;两个小问题&lt;/h4&gt;
&lt;p&gt;为什么要重写run方法？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为run是用来封装被线程执行的代码&lt;/li&gt;
&lt;li&gt;run()方法和start()方法的区别？&lt;/li&gt;
&lt;li&gt;run()：封装线程执行的代码，直接调用，相当于普通方法的调用，并没有开启线程.&lt;/li&gt;
&lt;li&gt;start()：启动线程；然后由VM调用此线程的run()方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;方式2：实现Runnable&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义一个类MyRunnable实现Runnable接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在MyRunnable类中重写run()方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建MyRunnable类的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建Thread类的对象，把MyRunnable对象作为构造方法的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRunnable&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;第二种方式&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRunnableTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//        创建一个参数对象&lt;/span&gt;
        &lt;span class="n"&gt;MyRunnable&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyRunnable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;MyRunnable&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyRunnable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//        创建一个线程对象,并把参数传给这个线程&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//        开启线程&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;方式3：Callable和Future&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;定义一个类MyCallable实现Callable接口&lt;/li&gt;
&lt;li&gt;在MyCallable类中重写call()方法·创建MyCallable类的对象&lt;/li&gt;
&lt;li&gt;创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数&lt;/li&gt;
&lt;li&gt;创建Thread类的对象，把FutureTask对象作为构造方法的参数&lt;/li&gt;
&lt;li&gt;启动线程&lt;/li&gt;
&lt;li&gt;再调用get方法，就可以获取线看程结束之后的结果。&lt;/li&gt;
&lt;li&gt;值得注意的是:get方法要在start开启之后调用.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyCallable&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;线程执行中&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;线程执行完成&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyCallableTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ExecutionException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyCallable&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyCallable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//        可以获取线程执行后的结果,也可以作为参数传递诶Thread&lt;/span&gt;
        &lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FutureTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//        开启线程&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//        返回值&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/thread-know-java/</guid><pubDate>Mon, 09 Mar 2020 12:10:00 +0806</pubDate></item><item><title>Java多线程的安全问题</title><link>/archives/thread-safe-java/</link><description>&lt;h1&gt;线程的安全问题&lt;/h1&gt;
&lt;h2&gt;案例&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt; ：某电影院目前正在上映国产大片，共有100张票，而他有3个窗口卖票，请设计一个程序模拟该电影院卖票&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义一个类Ticket实现Runnable接口，里面定义一个成员变量：
&lt;code&gt;private int ticketCount = 100;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Ticket类中重写run()方法实现卖票，步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断票数如果大于0，就卖票，并告知哪个窗口购买&lt;/li&gt;
&lt;li&gt;票数自动减一&lt;/li&gt;
&lt;li&gt;卖光之后，线程停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义一个测试类TicketDemo，步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建Ticket类的对象&lt;/li&gt;
&lt;li&gt;创建三个Thread类的对象，把Ticket对象作为构造方法的参数，并给出对应的窗口名称&lt;/li&gt;
&lt;li&gt;启动线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实现&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ticket&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticketCount&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;正在卖票,还剩有&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Ticket&lt;/span&gt; &lt;span class="n"&gt;ticket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ticket&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;一号窗口&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;二号窗口&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;三号窗口&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;卖票案例的思考&lt;/h2&gt;
&lt;p&gt;看似这个案例没有什么问题,但是在实际生活中,售票时候出票是需要一定的时间的,所以在出售一张票的时候需要一点时间的延迟,接下来就修改卖票程序中的动作,每次出票时间为100毫秒,用sleep()方法实现。&lt;/p&gt;
&lt;p&gt;此时出现了问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同的票出现了多次&lt;/li&gt;
&lt;li&gt;出现的负数的票&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么出现这个问题（这也是我们判断多线程程序是否会有数据安全问题的标准）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程操作共享数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果解决多线程安全问题？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本思想：让程序没有安全问题的环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把多条语句操作共享数据的代码&lt;strong&gt;锁&lt;/strong&gt;起来，让任意时刻只能有一个先吃执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同步代码块&lt;/h2&gt;
&lt;p&gt;锁多条语句操作共享数据，可以使用同步代码块实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;synchronized(任意对象){ 多条语句操作共享数据的代码 }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认情况是打开的，只要有一个线程进去执行代码了，锁就会关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当线程执行完了之后，锁就会自动打开。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步的好处和弊端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：解决了多线程的数据安全问题&lt;/li&gt;
&lt;li&gt;弊端：当线程很多时，因为每个线程都会去&lt;strong&gt;判断&lt;/strong&gt;同步上的锁，这是非常浪费资源的，无形中降低了程序的运行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们更新一下Ticket类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ticket&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

            &lt;span class="c1"&gt;//锁对象,任意对象就可以.&lt;/span&gt;
            &lt;span class="c1"&gt;//多个线程必须使用同一把锁&lt;/span&gt;
            &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticketCount&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;正在卖票,还剩有&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;张&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="546" data-height="352" src="https://cdn.xn2001.com/2020/02/05/20200205011342.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时的运行结果变得非常自然。&lt;/p&gt;
&lt;h3&gt;synchronized的锁对象必须是唯一的&lt;/h3&gt;
&lt;h2&gt;同步方法&lt;/h2&gt;
&lt;p&gt;同步方法：就是把&lt;code&gt;synchronized&lt;/code&gt;关键字加到方法上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;修饰符 synchronized 返回值类型 方法名(方法参数){ }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同步静态方法：就是把synchronized关键词加到静态方法上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;修饰符 static synchronized 返回值类型 方法名(方法参数){ }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要记住：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同步方法到底锁对象是什么？ &lt;strong&gt;this&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步静态方法的锁对象是什么？ &lt;strong&gt;类名.class&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;同步代码块和同步方法的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同步代码块可以锁住指定代码，同步方法是锁住方法中所有代码。&lt;/li&gt;
&lt;li&gt;同步代码块可以指定锁对象，同步方法不能&lt;strong&gt;指定&lt;/strong&gt;锁对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;★Lock锁&lt;/h2&gt;
&lt;p&gt;虽然我们可以理解同步代码块和同步方法的锁对象，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更加清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock&lt;/p&gt;
&lt;p&gt;Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作&lt;/p&gt;
&lt;p&gt;Lock中提供了获得锁和释放锁的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void lock()             获得锁&lt;/li&gt;
&lt;li&gt;void unlock()        释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lock是接口不能直接实例化，可以采用它的实现类&lt;code&gt;ReentrantLock&lt;/code&gt;来实例化&lt;/p&gt;
&lt;p&gt;ReentrantLock的构造方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReentrantLock()  创建一个ReentrantLock的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;注意&lt;/strong&gt;：一般释放锁unlock要放入&lt;strong&gt;finally&lt;/strong&gt;中。&lt;/h4&gt;
&lt;p&gt;下面我们使用Lock来更新一下Ticket类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ticket&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//锁对象Lock&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReentrantLock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//开启Lock锁&lt;/span&gt;
            &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;正在卖票,还剩有&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ticketCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;张&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//释放Lock锁&lt;/span&gt;
                &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;死锁&lt;/h1&gt;
&lt;p&gt;线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行。&lt;/p&gt;
&lt;p&gt;建议：不要写锁的嵌套。&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/thread-safe-java/</guid><pubDate>Mon, 09 Mar 2020 12:10:00 +0806</pubDate></item><item><title>Java多线程的常见方法</title><link>/archives/thread-void-java/</link><description>&lt;h2&gt;三种多线程实现方式的优缺点&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;实现Runnable、Callable接口&lt;/td&gt;
&lt;td&gt;扩展性强，实现该接口的同时还可以继承其他的类&lt;/td&gt;
&lt;td&gt;编程相对复杂,不能直接使用Thread类的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;继承Thread类&lt;/td&gt;
&lt;td&gt;编程比较简单，可以直接使用Thread类中的方法&lt;/td&gt;
&lt;td&gt;扩展性较差，不能继承其他的类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;获取和设置线程名称&lt;/h2&gt;
&lt;p&gt;获取线程的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String getName() ：返回此线程的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置线程的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接在创建对象时通过构造方法传参&lt;/li&gt;
&lt;li&gt;void setName(String name) &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyThread&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;线程开启了&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyThreadTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyThread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小明&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;MyThread&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小红&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//        使用setName()&lt;/span&gt;
&lt;span class="c1"&gt;//        t1.setName(&amp;quot;小明&amp;quot;);&lt;/span&gt;
&lt;span class="c1"&gt;//        t2.setName(&amp;quot;小红&amp;quot;);&lt;/span&gt;

        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：线程是有默认名字的，为Thread-编号&lt;/p&gt;
&lt;h2&gt;获取当前线程的对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;public static Thread currentThread() ：返回当前正在执行的线程对象的引用&lt;/li&gt;
&lt;li&gt;作用：当使用 实现Runnable 创建线程时，不可以直接使用getName()，此时应该用 Thread.currentThread().getName()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRunnable&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;第二种方式&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;线程休眠&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;public static void sleep(long time) ：让线程休眠指定的时间，单位为毫秒。 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//线程休眠&lt;/span&gt;
                &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; ----First Thread----&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;后台线程/守护线程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当线程停止时，守护线程也随之停止。&lt;/li&gt;
&lt;li&gt;public final void sedDaemon(boolean on) ：设置为守护线程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Runnable1&lt;/span&gt; &lt;span class="n"&gt;runnable1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Runnable2&lt;/span&gt; &lt;span class="n"&gt;runnable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runnable1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;线程一&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runnable2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;线程二&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//        设置线程二为守护线程&lt;/span&gt;
        &lt;span class="n"&gt;thread2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDaemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;thread1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;thread2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Runnable1&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;执行了&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Runnable2&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;执行了&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;线程调度多线程的并发运行：&lt;/h2&gt;
&lt;p&gt;计算机中的CPU，在任意时刻只能执行一条机器指令。每个线程只有获得CPU的使用权才能执行代码。各个线程轮流获得CPU的使用校，分别执行各自的任务。&lt;/p&gt;
&lt;h2&gt;线程调度&lt;/h2&gt;
&lt;p&gt;线程有两种调度模型·分时调度模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片&lt;/li&gt;
&lt;li&gt;抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会雕机选择一个，优先级高的线程获取的CPU时间片相对多一些&lt;/li&gt;
&lt;li&gt;Java使用的是抢占式调度模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;线程的优先级&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;public final void setPriority(int newPriority)    设置线程的优先级&lt;/li&gt;
&lt;li&gt;public  final int getPriority()   获取线程的优先级&lt;/li&gt;
&lt;li&gt;线程的优先级1-10，默认为5&lt;/li&gt;
&lt;li&gt;优先级更高，抢夺到cpu执行权的机率更高，但仅仅只是机率。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RunnableTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyRunnable1&lt;/span&gt; &lt;span class="n"&gt;runnable1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyRunnable1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;MyRunnable2&lt;/span&gt; &lt;span class="n"&gt;runnable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyRunnable2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runnable1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runnable2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//设置线程优先级&lt;/span&gt;
        &lt;span class="n"&gt;thread1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;thread2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//打印出线程一的优先级,不设置时默认为5&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPriority&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="n"&gt;thread1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;thread2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRunnable1&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//线程休眠&lt;/span&gt;
                &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; ----First Thread----&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyRunnable2&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//线程休眠&lt;/span&gt;
                &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; ----Second Thread----&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;线程生命周期&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="1049" data-height="381" src="https://cdn.xn2001.com/2020/01/1809456008.png#vwid=1049&amp;vhei=381" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
</description><author>jialna@qq.com (乐心湖)</author><guid isPermaLink="true">/archives/thread-void-java/</guid><pubDate>Mon, 09 Mar 2020 13:10:00 +0806</pubDate></item></channel></rss>